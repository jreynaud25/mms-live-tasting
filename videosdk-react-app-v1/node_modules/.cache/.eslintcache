[{"/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/index.js":"1","/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/App.js":"2","/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/reportWebVitals.js":"3","/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/api.js":"4"},{"size":500,"mtime":1644960584340,"results":"5","hashOfConfig":"6"},{"size":5357,"mtime":1644960689010,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1644960584341,"results":"8","hashOfConfig":"6"},{"size":606,"mtime":1644994962449,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lhsp2",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/index.js",[],[],"/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/App.js",["23"],[],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Row, Col } from 'react-simple-flex-grid';\nimport \"react-simple-flex-grid/lib/main.css\";\nimport {\n  MeetingProvider,\n  MeetingConsumer,\n  useMeeting,\n  useParticipant,\n} from \"@videosdk.live/react-sdk\";\n\nimport { getToken, createMeeting } from \"./api\";\n\nconst chunk = (arr) => {\n  const newArr = [];\n  while (arr.length) newArr.push(arr.splice(0, 3));\n  return newArr;\n};\n\n\nfunction ParticipantView(props) {\n  const webcamRef = useRef(null);\n  const micRef = useRef(null);\n  const screenShareRef = useRef(null);\n\n  const {\n    displayName,\n    webcamStream,\n    micStream,\n    screenShareStream,\n    webcamOn,\n    micOn,\n    screenShareOn\n  } = useParticipant(props.participantId);\n\n  useEffect(() => {\n    if (webcamRef.current) {\n      if (webcamOn) {\n        const mediaStream = new MediaStream();\n        mediaStream.addTrack(webcamStream.track);\n\n        webcamRef.current.srcObject = mediaStream;\n        webcamRef.current\n          .play()\n          .catch((error) =>\n            console.error(\"videoElem.current.play() failed\", error)\n          );\n      } else {\n        webcamRef.current.srcObject = null;\n      }\n    }\n  }, [webcamStream, webcamOn]);\n\n  useEffect(() => {\n    if (micRef.current) {\n      if (micOn) {\n        const mediaStream = new MediaStream();\n        mediaStream.addTrack(micStream.track);\n\n        micRef.current.srcObject = mediaStream;\n        micRef.current\n          .play()\n          .catch((error) =>\n            console.error(\"videoElem.current.play() failed\", error)\n          );\n      } else {\n        micRef.current.srcObject = null;\n      }\n    }\n  }, [micStream, micOn]);\n\n  useEffect(() => {\n    if (screenShareRef.current) {\n      if (screenShareOn) {\n        const mediaStream = new MediaStream();\n        mediaStream.addTrack(screenShareStream.track);\n\n        screenShareRef.current.srcObject = mediaStream;\n        screenShareRef.current\n          .play()\n          .catch((error) =>\n            console.error(\"videoElem.current.play() failed\", error)\n          );\n      } else {\n        screenShareRef.current.srcObject = null;\n      }\n    }\n  }, [screenShareStream, screenShareOn]);\n\n\n  return (\n    <div key={props.participantId} >\n      <audio ref={micRef} autoPlay />\n      {webcamRef ||  micOn ? (<div>\n      <h2>{displayName}</h2>\n      <video\n        height={\"100%\"}\n        width={\"100%\"}\n        ref={webcamRef}\n        autoPlay\n      />\n      </div>) : null }\n      {screenShareOn ? (\n      <div>\n        <h2>Screen Shared</h2>\n        <video\n          height={\"100%\"}\n          width={\"100%\"}\n          ref={screenShareRef}\n          autoPlay\n        />\n      </div>) : null }\n      <br/>\n      <span>Mic:{micOn ? \"Yes\": \"No\"}, Camera: {webcamOn ? \"Yes\" : \"No\"}, Screen Share: {screenShareOn ? \"Yes\" : \"No\"}</span>\n    </div>\n  );\n}\n\n\n\nfunction MeetingGrid(props) {\n  const [joined, setJoined] = useState(false)\n  const {\n    join, \n    leave,  \n    toggleMic,\n    toggleWebcam,\n    toggleScreenShare\n  } = useMeeting()\n  const { participants } = useMeeting();\n  const joinMeeting = () => {\n    setJoined(true)\n    join()\n  }\n  return (\n    <div>\n      <header>Meeting Id: {props.meetingId}</header>\n      {joined ? \n      (\n        <div >\n          <button  onClick={leave}>\n            Leave\n          </button>\n          <button  onClick={toggleMic}>\n            toggleMic\n          </button>\n          <button  onClick={toggleWebcam}>\n            toggleWebcam\n          </button>\n          <button  onClick={toggleScreenShare}>\n            toggleScreenShare\n          </button> \n        </div>\n      ) \n      : (<button  onClick={joinMeeting}>\n        Join\n      </button>)}\n      <div\n        \n      >\n        {chunk([...participants.keys()]).map((k) => (\n          <Row  key={k}  gutter={80}>\n              {k.map((l) => (\n                <Col span={4}>\n                  <ParticipantView key={l} participantId={l} />\n                </Col>\n              ))}\n          </Row>\n        ))}\n      </div>\n      \n    </div>\n  )\n}\n\nfunction JoinScreen({updateMeetingId, getMeetingAndToken}) {\n  return(\n    <div>\n      <input type=\"text\" placeholder=\"Enter Meeting Id\" onChange={(e) => {updateMeetingId(e.target.value)}}  />\n      <button  onClick={getMeetingAndToken}>\n        Join\n      </button>\n      <button  onClick={getMeetingAndToken}>\n        Create Meeting\n      </button>\n    </div>\n  );\n}\n\n\nfunction App() {\n  const [token, setToken] = useState(null);\n  const [meetingId, setMeetingId] = useState(null);\n\n  const getMeetingAndToken = async () => {\n    const token = await getToken();\n    setToken(token);\n    setMeetingId(meetingId ? meetingId : (await createMeeting({ token })));\n  };\n\n  const updateMeetingId = (meetingId) => {\n    setMeetingId(meetingId)\n  }\n\n  return token && meetingId ? (\n    <MeetingProvider\n      config={{\n        meetingId,\n        micEnabled: true,\n        webcamEnabled: true,\n        name: \"John doe\",\n      }}\n      token={token}\n    >\n      <MeetingConsumer>\n        {() => <MeetingGrid meetingId={meetingId} getMeetingAndToken={getMeetingAndToken}  />}\n      </MeetingConsumer>\n    </MeetingProvider>\n  ) : (\n    <JoinScreen updateMeetingId={updateMeetingId} getMeetingAndToken={getMeetingAndToken}   />\n  );\n}\n\nexport default App;","/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/reportWebVitals.js",[],[],"/Users/jreynaud/Dropbox/00_JRVJ/PROJECTS/07_MOMUS/03__FINAL/06_WEB/live-tasting-3/application/videosdk-react-app-v1/src/api.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":1,"column":8,"nodeType":"26","messageId":"27","endLine":1,"endColumn":12},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar"]