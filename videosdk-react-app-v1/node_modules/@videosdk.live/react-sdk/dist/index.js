function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var EventEmitter = _interopDefault(require('events'));
var jsSdk = require('@videosdk.live/js-sdk');

var eventPrifix = 'videosdk-live-react-sdk';
var events = {
  'participant-joined': eventPrifix + "-participant-joined",
  'participant-left': eventPrifix + "-participant-left",
  'speaker-changed': eventPrifix + "-speaker-changed",
  'presenter-changed': eventPrifix + "-presenter-changed",
  'main-participant-changed': eventPrifix + "-main-participant-changed",
  'entry-requested': eventPrifix + "-entry-requested",
  'entry-responded': eventPrifix + "-entry-responded",
  'recording-started': eventPrifix + "-recording-started",
  'recording-stopped': eventPrifix + "-recording-stopped",
  'chat-message': eventPrifix + "-chat-message",
  'meeting-joined': eventPrifix + "-meeting-joined",
  'meeting-left': eventPrifix + "-meeting-left",
  'live-stream-started': eventPrifix + "-live-stream-started",
  'live-stream-stopped': eventPrifix + "-live-stream-stopped",
  'video-state-changed': eventPrifix + "-video-state-changed",
  'video-seeked': eventPrifix + "-video-seeked",
  'webcam-requested': eventPrifix + "-webcam-requested",
  'mic-requested': eventPrifix + "-mic-requested",
  'pin-state-changed': eventPrifix + "-pin-state-changed",
  'connection-open': eventPrifix + "-connection-open",
  'connection-close': eventPrifix + "-connection-close",
  'switch-meeting': eventPrifix + "-switch-meeting",
  error: eventPrifix + "-error"
};
var eventEmitter = new EventEmitter();
eventEmitter.setMaxListeners(9999);

var MeetingProviderContex = React.createContext();
var useMeeting = function useMeeting(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$onParticipantJoi = _ref.onParticipantJoined,
      onParticipantJoined = _ref$onParticipantJoi === void 0 ? function () {} : _ref$onParticipantJoi,
      _ref$onParticipantLef = _ref.onParticipantLeft,
      onParticipantLeft = _ref$onParticipantLef === void 0 ? function () {} : _ref$onParticipantLef,
      _ref$onSpeakerChanged = _ref.onSpeakerChanged,
      onSpeakerChanged = _ref$onSpeakerChanged === void 0 ? function () {} : _ref$onSpeakerChanged,
      _ref$onPresenterChang = _ref.onPresenterChanged,
      onPresenterChanged = _ref$onPresenterChang === void 0 ? function () {} : _ref$onPresenterChang,
      _ref$onMainParticipan = _ref.onMainParticipantChanged,
      onMainParticipantChanged = _ref$onMainParticipan === void 0 ? function () {} : _ref$onMainParticipan,
      _ref$onEntryRequested = _ref.onEntryRequested,
      onEntryRequested = _ref$onEntryRequested === void 0 ? function () {} : _ref$onEntryRequested,
      _ref$onEntryResponded = _ref.onEntryResponded,
      onEntryResponded = _ref$onEntryResponded === void 0 ? function () {} : _ref$onEntryResponded,
      _ref$onRecordingStart = _ref.onRecordingStarted,
      onRecordingStarted = _ref$onRecordingStart === void 0 ? function () {} : _ref$onRecordingStart,
      _ref$onRecordingStopp = _ref.onRecordingStopped,
      onRecordingStopped = _ref$onRecordingStopp === void 0 ? function () {} : _ref$onRecordingStopp,
      _ref$onChatMessage = _ref.onChatMessage,
      onChatMessage = _ref$onChatMessage === void 0 ? function () {} : _ref$onChatMessage,
      _ref$onMeetingJoined = _ref.onMeetingJoined,
      onMeetingJoined = _ref$onMeetingJoined === void 0 ? function () {} : _ref$onMeetingJoined,
      _ref$onMeetingLeft = _ref.onMeetingLeft,
      onMeetingLeft = _ref$onMeetingLeft === void 0 ? function () {} : _ref$onMeetingLeft,
      _ref$onLiveStreamStar = _ref.onLiveStreamStarted,
      onLiveStreamStarted = _ref$onLiveStreamStar === void 0 ? function () {} : _ref$onLiveStreamStar,
      _ref$onLiveStreamStop = _ref.onLiveStreamStopped,
      onLiveStreamStopped = _ref$onLiveStreamStop === void 0 ? function () {} : _ref$onLiveStreamStop,
      _ref$onVideoStateChan = _ref.onVideoStateChanged,
      onVideoStateChanged = _ref$onVideoStateChan === void 0 ? function () {} : _ref$onVideoStateChan,
      _ref$onVideoSeeked = _ref.onVideoSeeked,
      onVideoSeeked = _ref$onVideoSeeked === void 0 ? function () {} : _ref$onVideoSeeked,
      _ref$onWebcamRequeste = _ref.onWebcamRequested,
      onWebcamRequested = _ref$onWebcamRequeste === void 0 ? function () {} : _ref$onWebcamRequeste,
      _ref$onMicRequested = _ref.onMicRequested,
      onMicRequested = _ref$onMicRequested === void 0 ? function () {} : _ref$onMicRequested,
      _ref$onPinStateChange = _ref.onPinStateChanged,
      onPinStateChanged = _ref$onPinStateChange === void 0 ? function () {} : _ref$onPinStateChange,
      _ref$onConnectionOpen = _ref.onConnectionOpen,
      onConnectionOpen = _ref$onConnectionOpen === void 0 ? function () {} : _ref$onConnectionOpen,
      _ref$onConnetionClose = _ref.onConnetionClose,
      onConnetionClose = _ref$onConnetionClose === void 0 ? function () {} : _ref$onConnetionClose,
      _ref$onSwitchMeeting = _ref.onSwitchMeeting,
      onSwitchMeeting = _ref$onSwitchMeeting === void 0 ? function () {} : _ref$onSwitchMeeting,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? function () {} : _ref$onError;

  React.useEffect(function () {
    eventEmitter.on(events['participant-joined'], onParticipantJoined);
    eventEmitter.on(events['participant-left'], onParticipantLeft);
    eventEmitter.on(events['speaker-changed'], onSpeakerChanged);
    eventEmitter.on(events['presenter-changed'], onPresenterChanged);
    eventEmitter.on(events['main-participant-changed'], onMainParticipantChanged);
    eventEmitter.on(events['entry-requested'], onEntryRequested);
    eventEmitter.on(events['entry-responded'], onEntryResponded);
    eventEmitter.on(events['recording-started'], onRecordingStarted);
    eventEmitter.on(events['recording-stopped'], onRecordingStopped);
    eventEmitter.on(events['chat-message'], onChatMessage);
    eventEmitter.on(events['meeting-joined'], onMeetingJoined);
    eventEmitter.on(events['meeting-left'], onMeetingLeft);
    eventEmitter.on(events['live-stream-started'], onLiveStreamStarted);
    eventEmitter.on(events['live-stream-stopped'], onLiveStreamStopped);
    eventEmitter.on(events['video-state-changed'], onVideoStateChanged);
    eventEmitter.on(events['video-seeked'], onVideoSeeked);
    eventEmitter.on(events['webcam-requested'], onWebcamRequested);
    eventEmitter.on(events['mic-requested'], onMicRequested);
    eventEmitter.on(events['pin-state-changed'], onPinStateChanged);
    eventEmitter.on(events['connection-open'], onConnectionOpen);
    eventEmitter.on(events['connection-close'], onConnetionClose);
    eventEmitter.on(events['switch-meeting'], onSwitchMeeting);
    eventEmitter.on(events['error'], onError);
    return function () {
      eventEmitter.off(events['participant-joined'], onParticipantJoined);
      eventEmitter.off(events['participant-left'], onParticipantLeft);
      eventEmitter.off(events['speaker-changed'], onSpeakerChanged);
      eventEmitter.off(events['presenter-changed'], onPresenterChanged);
      eventEmitter.off(events['main-participant-changed'], onMainParticipantChanged);
      eventEmitter.off(events['entry-requested'], onEntryRequested);
      eventEmitter.off(events['entry-responded'], onEntryResponded);
      eventEmitter.off(events['recording-started'], onRecordingStarted);
      eventEmitter.off(events['recording-stopped'], onRecordingStopped);
      eventEmitter.off(events['chat-message'], onChatMessage);
      eventEmitter.off(events['meeting-joined'], onMeetingJoined);
      eventEmitter.off(events['meeting-left'], onMeetingLeft);
      eventEmitter.off(events['live-stream-started'], onLiveStreamStarted);
      eventEmitter.off(events['live-stream-stopped'], onLiveStreamStopped);
      eventEmitter.off(events['video-state-changed'], onVideoStateChanged);
      eventEmitter.off(events['video-seeked'], onVideoSeeked);
      eventEmitter.off(events['webcam-requested'], onWebcamRequested);
      eventEmitter.off(events['mic-requested'], onMicRequested);
      eventEmitter.off(events['pin-state-changed'], onPinStateChanged);
      eventEmitter.off(events['connection-open'], onConnectionOpen);
      eventEmitter.off(events['connection-close'], onConnetionClose);
      eventEmitter.off(events['switch-meeting'], onSwitchMeeting);
      eventEmitter.off(events['error'], onError);
    };
  }, []);
  return React.useContext(MeetingProviderContex);
};
var MeetingConsumer = function MeetingConsumer(_ref2) {
  var children = _ref2.children,
      _ref2$onParticipantJo = _ref2.onParticipantJoined,
      onParticipantJoined = _ref2$onParticipantJo === void 0 ? function () {} : _ref2$onParticipantJo,
      _ref2$onParticipantLe = _ref2.onParticipantLeft,
      onParticipantLeft = _ref2$onParticipantLe === void 0 ? function () {} : _ref2$onParticipantLe,
      _ref2$onSpeakerChange = _ref2.onSpeakerChanged,
      onSpeakerChanged = _ref2$onSpeakerChange === void 0 ? function () {} : _ref2$onSpeakerChange,
      _ref2$onPresenterChan = _ref2.onPresenterChanged,
      onPresenterChanged = _ref2$onPresenterChan === void 0 ? function () {} : _ref2$onPresenterChan,
      _ref2$onMainParticipa = _ref2.onMainParticipantChanged,
      onMainParticipantChanged = _ref2$onMainParticipa === void 0 ? function () {} : _ref2$onMainParticipa,
      _ref2$onEntryRequeste = _ref2.onEntryRequested,
      onEntryRequested = _ref2$onEntryRequeste === void 0 ? function () {} : _ref2$onEntryRequeste,
      _ref2$onEntryResponde = _ref2.onEntryResponded,
      onEntryResponded = _ref2$onEntryResponde === void 0 ? function () {} : _ref2$onEntryResponde,
      _ref2$onRecordingStar = _ref2.onRecordingStarted,
      onRecordingStarted = _ref2$onRecordingStar === void 0 ? function () {} : _ref2$onRecordingStar,
      _ref2$onRecordingStop = _ref2.onRecordingStopped,
      onRecordingStopped = _ref2$onRecordingStop === void 0 ? function () {} : _ref2$onRecordingStop,
      _ref2$onChatMessage = _ref2.onChatMessage,
      onChatMessage = _ref2$onChatMessage === void 0 ? function () {} : _ref2$onChatMessage,
      _ref2$onMeetingJoined = _ref2.onMeetingJoined,
      onMeetingJoined = _ref2$onMeetingJoined === void 0 ? function () {} : _ref2$onMeetingJoined,
      _ref2$onMeetingLeft = _ref2.onMeetingLeft,
      onMeetingLeft = _ref2$onMeetingLeft === void 0 ? function () {} : _ref2$onMeetingLeft,
      _ref2$onLiveStreamSta = _ref2.onLiveStreamStarted,
      onLiveStreamStarted = _ref2$onLiveStreamSta === void 0 ? function () {} : _ref2$onLiveStreamSta,
      _ref2$onLiveStreamSto = _ref2.onLiveStreamStopped,
      onLiveStreamStopped = _ref2$onLiveStreamSto === void 0 ? function () {} : _ref2$onLiveStreamSto,
      _ref2$onVideoStateCha = _ref2.onVideoStateChanged,
      onVideoStateChanged = _ref2$onVideoStateCha === void 0 ? function () {} : _ref2$onVideoStateCha,
      _ref2$onVideoSeeked = _ref2.onVideoSeeked,
      onVideoSeeked = _ref2$onVideoSeeked === void 0 ? function () {} : _ref2$onVideoSeeked,
      _ref2$onWebcamRequest = _ref2.onWebcamRequested,
      onWebcamRequested = _ref2$onWebcamRequest === void 0 ? function () {} : _ref2$onWebcamRequest,
      _ref2$onMicRequested = _ref2.onMicRequested,
      onMicRequested = _ref2$onMicRequested === void 0 ? function () {} : _ref2$onMicRequested,
      _ref2$onPinStateChang = _ref2.onPinStateChanged,
      onPinStateChanged = _ref2$onPinStateChang === void 0 ? function () {} : _ref2$onPinStateChang,
      _ref2$onConnectionOpe = _ref2.onConnectionOpen,
      onConnectionOpen = _ref2$onConnectionOpe === void 0 ? function () {} : _ref2$onConnectionOpe,
      _ref2$onConnetionClos = _ref2.onConnetionClose,
      onConnetionClose = _ref2$onConnetionClos === void 0 ? function () {} : _ref2$onConnetionClos,
      _ref2$onSwitchMeeting = _ref2.onSwitchMeeting,
      onSwitchMeeting = _ref2$onSwitchMeeting === void 0 ? function () {} : _ref2$onSwitchMeeting,
      _ref2$onError = _ref2.onError,
      onError = _ref2$onError === void 0 ? function () {} : _ref2$onError;
  React.useEffect(function () {
    eventEmitter.on(events['participant-joined'], onParticipantJoined);
    eventEmitter.on(events['participant-left'], onParticipantLeft);
    eventEmitter.on(events['speaker-changed'], onSpeakerChanged);
    eventEmitter.on(events['presenter-changed'], onPresenterChanged);
    eventEmitter.on(events['main-participant-changed'], onMainParticipantChanged);
    eventEmitter.on(events['entry-requested'], onEntryRequested);
    eventEmitter.on(events['entry-responded'], onEntryResponded);
    eventEmitter.on(events['recording-started'], onRecordingStarted);
    eventEmitter.on(events['recording-stopped'], onRecordingStopped);
    eventEmitter.on(events['chat-message'], onChatMessage);
    eventEmitter.on(events['meeting-joined'], onMeetingJoined);
    eventEmitter.on(events['meeting-left'], onMeetingLeft);
    eventEmitter.on(events['live-stream-enabled'], onLiveStreamStarted);
    eventEmitter.on(events['live-stream-disabled'], onLiveStreamStopped);
    eventEmitter.on(events['video-state-changed'], onVideoStateChanged);
    eventEmitter.on(events['video-seeked'], onVideoSeeked);
    eventEmitter.on(events['webcam-requested'], onWebcamRequested);
    eventEmitter.on(events['mic-requested'], onMicRequested);
    eventEmitter.on(events['pin-state-changed'], onPinStateChanged);
    eventEmitter.on(events['connection-open'], onConnectionOpen);
    eventEmitter.on(events['connection-close'], onConnetionClose);
    eventEmitter.on(events['switch-meeting'], onSwitchMeeting);
    eventEmitter.on(events['error'], onError);
    return function () {
      eventEmitter.off(events['participant-joined'], onParticipantJoined);
      eventEmitter.off(events['participant-left'], onParticipantLeft);
      eventEmitter.off(events['speaker-changed'], onSpeakerChanged);
      eventEmitter.off(events['presenter-changed'], onPresenterChanged);
      eventEmitter.off(events['main-participant-changed'], onMainParticipantChanged);
      eventEmitter.off(events['entry-requested'], onEntryRequested);
      eventEmitter.off(events['entry-responded'], onEntryResponded);
      eventEmitter.off(events['recording-started'], onRecordingStarted);
      eventEmitter.off(events['recording-stopped'], onRecordingStopped);
      eventEmitter.off(events['chat-message'], onChatMessage);
      eventEmitter.off(events['meeting-joined'], onMeetingJoined);
      eventEmitter.off(events['meeting-left'], onMeetingLeft);
      eventEmitter.off(events['live-stream-enabled'], onLiveStreamStarted);
      eventEmitter.off(events['live-stream-disabled'], onLiveStreamStopped);
      eventEmitter.off(events['video-state-changed'], onVideoStateChanged);
      eventEmitter.off(events['video-seeked'], onVideoSeeked);
      eventEmitter.off(events['webcam-requested'], onWebcamRequested);
      eventEmitter.off(events['mic-requested'], onMicRequested);
      eventEmitter.off(events['pin-state-changed'], onPinStateChanged);
      eventEmitter.off(events['connection-open'], onConnectionOpen);
      eventEmitter.off(events['connection-close'], onConnetionClose);
      eventEmitter.off(events['switch-meeting'], onSwitchMeeting);
      eventEmitter.off(events['error'], onError);
    };
  }, []);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(MeetingProviderContex.Consumer, null, children));
};

var MeetingProvider = function MeetingProvider(_ref) {
  var children = _ref.children,
      config = _ref.config,
      token = _ref.token,
      joinWithoutUserInteraction = _ref.joinWithoutUserInteraction,
      _reinitialiseMeetingOnConfigChange = _ref.reinitialiseMeetingOnConfigChange;

  var _useState = React.useState(null),
      meeting = _useState[0],
      setMeeting = _useState[1];

  var _useState2 = React.useState(null),
      localParticipant = _useState2[0],
      setLocalParticipant = _useState2[1];

  var _useState3 = React.useState(null),
      mainParticipant = _useState3[0],
      setMainParticipant = _useState3[1];

  var _useState4 = React.useState(null),
      activeSpeakerId = _useState4[0],
      setActiveSpeakerId = _useState4[1];

  var _useState5 = React.useState(null),
      presenterId = _useState5[0],
      setPresenterId = _useState5[1];

  var _useState6 = React.useState(false),
      localMicOn = _useState6[0],
      setLocalMicOn = _useState6[1];

  var _useState7 = React.useState(false),
      localWebcamOn = _useState7[0],
      setLocalWebcamOn = _useState7[1];

  var _useState8 = React.useState(false),
      localScreenShareOn = _useState8[0],
      setLocalScreenShareOn = _useState8[1];

  var _useState9 = React.useState(false),
      isRecording = _useState9[0],
      setIsRecording = _useState9[1];

  var _useState10 = React.useState([]),
      messages = _useState10[0],
      setMessages = _useState10[1];

  var _useState11 = React.useState(new Map()),
      participants = _useState11[0],
      setParticipants = _useState11[1];

  var _useState12 = React.useState(new Map()),
      pinnedParticipants = _useState12[0],
      setPinnedParticipants = _useState12[1];

  var _useState13 = React.useState(false),
      isLiveStreaming = _useState13[0],
      setIsLiveStreaming = _useState13[1];

  var _useState14 = React.useState(new Map()),
      connections = _useState14[0],
      setConnections = _useState14[1];

  var _useState15 = React.useState(false),
      isMeetingJoined = _useState15[0],
      setIsMeetingJoined = _useState15[1];

  var meetingRef = React.useRef();
  var localMicOnRef = React.useRef();
  var localWebcamOnRef = React.useRef();
  var localScreenShareOnRef = React.useRef();
  var isRecordingRef = React.useRef();
  var configRef = React.useRef(config);
  var tokenRef = React.useRef(token);
  var joinedOnFirstRender = React.useRef(false);
  var reinitialiseMeetingOnConfigChange = React.useMemo(function () {
    return _reinitialiseMeetingOnConfigChange;
  }, []);
  React.useEffect(function () {
    meetingRef.current = meeting;
  }, [meeting]);
  React.useEffect(function () {
    localMicOnRef.current = localMicOn;
  }, [localMicOn]);
  React.useEffect(function () {
    localWebcamOnRef.current = localWebcamOn;
  }, [localWebcamOn]);
  React.useEffect(function () {
    localScreenShareOnRef.current = localScreenShareOn;
  }, [localScreenShareOn]);
  React.useEffect(function () {
    isRecordingRef.current = isRecording;
  }, [isRecording]);
  React.useEffect(function () {
    configRef.current = config;
  }, [config]);
  React.useEffect(function () {
    tokenRef.current = token;
  }, [token]);

  var resetStates = function resetStates() {
    setMeeting(null);
    setLocalParticipant(null);
    setMainParticipant(null);
    setActiveSpeakerId(null);
    setPresenterId(null);
    setLocalMicOn(false);
    setLocalWebcamOn(false);
    setLocalScreenShareOn(false);
    setIsRecording(false);
    setMessages([]);
    setIsLiveStreaming(false);
    setParticipants(new Map());
    setPinnedParticipants(new Map());
    setConnections(new Map());
    setIsMeetingJoined(false);
  };

  var _handle_participant_joined = function _handle_participant_joined(participant) {
    setParticipants(function (participants) {
      participants.set(participant.id, participant);
      var participantsToSet = new Map(participants);
      return participantsToSet;
    });
    eventEmitter.emit(events['participant-joined'], participant);
  };

  var _handle_participant_left = function _handle_participant_left(participant) {
    setParticipants(function (participants) {
      participants["delete"](participant.id);
      var newParticipants = new Map(participants);
      return newParticipants;
    });
    eventEmitter.emit(events['participant-left'], participant);
  };

  var _handle_presenter_changed = function _handle_presenter_changed(presenterId) {
    var _meetingRef$current, _meetingRef$current$l;

    setPresenterId(presenterId);
    setLocalScreenShareOn(presenterId === (meetingRef === null || meetingRef === void 0 ? void 0 : (_meetingRef$current = meetingRef.current) === null || _meetingRef$current === void 0 ? void 0 : (_meetingRef$current$l = _meetingRef$current.localParticipant) === null || _meetingRef$current$l === void 0 ? void 0 : _meetingRef$current$l.id));
    eventEmitter.emit(events['presenter-changed'], presenterId);
  };

  var _handle_main_participant_changed = function _handle_main_participant_changed(participant) {
    setMainParticipant(participant);
    eventEmitter.emit(events['main-participant-changed'], participant);
  };

  var _handle_speaker_changed = function _handle_speaker_changed(activeSpeakerId) {
    setActiveSpeakerId(activeSpeakerId);
    eventEmitter.emit(events['speaker-changed'], activeSpeakerId);
  };

  var _handle_chat_message = function _handle_chat_message(data) {
    setMessages(function (s) {
      return [].concat(s, [data]);
    });
    eventEmitter.emit(events['chat-message'], data);
  };

  var _handle_entry_requested = function _handle_entry_requested(data) {
    eventEmitter.emit(events['entry-requested'], data);
  };

  var _handle_entry_responded = function _handle_entry_responded(participantId, decision) {
    eventEmitter.emit(events['entry-responded'], participantId, decision);
  };

  var _handle_recording_started = function _handle_recording_started() {
    setIsRecording(true);
    eventEmitter.emit(events['recording-started']);
  };

  var _handle_recording_stopped = function _handle_recording_stopped() {
    setIsRecording(false);
    eventEmitter.emit(events['recording-stopped']);
  };

  var _handle_localParticipant_stream_enabled = function _handle_localParticipant_stream_enabled(stream) {
    if (stream.track.readyState === 'live') {
      if (stream.kind === 'video') {
        setLocalWebcamOn(true);
      } else if (stream.kind === 'audio') {
        setLocalMicOn(true);
      }
    }
  };

  var _handle_localParticipant_stream_disabled = function _handle_localParticipant_stream_disabled(stream) {
    if (stream.track.readyState === 'ended') {
      if (stream.kind === 'video') {
        setLocalWebcamOn(false);
      } else if (stream.kind === 'audio') {
        setLocalMicOn(false);
      }
    }
  };

  var _handle_live_stream_started = function _handle_live_stream_started(data) {
    setIsLiveStreaming(true);
    eventEmitter.emit(events['live-stream-started'], data);
  };

  var _handle_live_stream_stopped = function _handle_live_stream_stopped() {
    setIsLiveStreaming(false);
    eventEmitter.emit(events['live-stream-stopped']);
  };

  var _handle_video_state_changed = function _handle_video_state_changed(data) {
    eventEmitter.emit(events['video-state-changed'], data);
  };

  var _handle_video_seeked = function _handle_video_seeked(data) {
    eventEmitter.emit(events['video-seeked'], data);
  };

  var _handle_webcam_requested = function _handle_webcam_requested(data) {
    eventEmitter.emit(events['webcam-requested'], data);
  };

  var _handle_mic_requested = function _handle_mic_requested(data) {
    eventEmitter.emit(events['mic-requested'], data);
  };

  var _handle_meeting_joined = function _handle_meeting_joined(data) {
    joinedOnFirstRender.current = true;
    setMessages(function (s) {
      return [].concat(s, data.messages);
    });
    eventEmitter.emit(events['meeting-joined'], data);
    setIsMeetingJoined(true);
  };

  var _handle_meeting_left = function _handle_meeting_left() {
    eventEmitter.emit(events['meeting-left']);
    var meeting = meetingRef.current;

    if (meeting) {
      var _meeting$localPartici;

      if (typeof (meeting === null || meeting === void 0 ? void 0 : meeting.off) === 'function') {
        meeting.off('participant-joined', _handle_participant_joined);
        meeting.off('participant-left', _handle_participant_left);
        meeting.off('presenter-changed', _handle_presenter_changed);
        meeting.off('main-participant-changed', _handle_main_participant_changed);
        meeting.off('speaker-changed', _handle_speaker_changed);
        meeting.off('entry-requested', _handle_entry_requested);
        meeting.off('entry-responded', _handle_entry_responded);
        meeting.off('chat-message', _handle_chat_message);
        meeting.off('recording-started', _handle_recording_started);
        meeting.off('recording-stopped', _handle_recording_stopped);
        meeting.off('meeting-joined', _handle_meeting_joined);
        meeting.off('meeting-left', _handle_meeting_left);
        meeting.off('livestream-started', _handle_live_stream_started);
        meeting.off('livestream-stopped', _handle_live_stream_stopped);
        meeting.off('video-state-changed', _handle_video_state_changed);
        meeting.off('video-seeked', _handle_video_seeked);
        meeting.off('webcam-requested', _handle_webcam_requested);
        meeting.off('mic-requested', _handle_mic_requested);
        meeting.off('pin-state-changed', _handle_pin_state_changed);
        meeting.off('connection-open', _handle_connection_open);
        meeting.off('connection-close', _handle_connection_close);
        meeting.off('switch-meeting', _handle_switch_meeting);
        meeting.off('error', _handle_error);
      }

      if (typeof (meeting === null || meeting === void 0 ? void 0 : (_meeting$localPartici = meeting.localParticipant) === null || _meeting$localPartici === void 0 ? void 0 : _meeting$localPartici.off) === 'function') {
        meeting.localParticipant.off('stream-enabled', _handle_localParticipant_stream_enabled);
        meeting.localParticipant.off('stream-disabled', _handle_localParticipant_stream_disabled);
      }

      resetStates();
    }
  };

  var _handle_pin_state_changed = function _handle_pin_state_changed(_ref2) {
    var participantId = _ref2.participantId,
        state = _ref2.state,
        pinnedBy = _ref2.pinnedBy;
    setPinnedParticipants(function (pinnedParticipants) {
      if (!state.cam && !state.share) {
        pinnedParticipants["delete"](participantId);
      } else {
        pinnedParticipants.set(participantId, state);
      }

      var pinnedParticipantsToSet = new Map(pinnedParticipants);
      return pinnedParticipantsToSet;
    });
    eventEmitter.emit(events['pin-state-changed'], {
      participantId: participantId,
      state: state,
      pinnedBy: pinnedBy
    });
  };

  var _handle_connection_open = function _handle_connection_open(connection) {
    setConnections(function (s) {
      s.set(connection.id, connection);
      var connectionsToSet = new Map(s);
      return connectionsToSet;
    });
    eventEmitter.emit(events['connection-open'], connection);
  };

  var _handle_connection_close = function _handle_connection_close(connectionId) {
    setConnections(function (s) {
      s["delete"](connectionId);
      var newConnections = new Map(s);
      return newConnections;
    });
    eventEmitter.emit(events['connection-close'], connectionId);
  };

  var _handle_error = function _handle_error(data) {
    eventEmitter.emit(events['error'], data);
  };

  var _handle_switch_meeting = function _handle_switch_meeting(d) {
    eventEmitter.emit(events['switch-meeting'], d);
  };

  var join = function join() {
    var meeting = jsSdk.VideoSDK && jsSdk.VideoSDK.initMeeting(configRef.current);
    setMeeting(meeting);
    var localParticipant = meeting.localParticipant,
        participants = meeting.participants;
    participants.set(localParticipant.id, localParticipant);
    setParticipants(participants);
    setLocalParticipant(localParticipant);
    meeting.on('participant-joined', _handle_participant_joined);
    meeting.on('participant-left', _handle_participant_left);
    meeting.on('presenter-changed', _handle_presenter_changed);
    meeting.on('main-participant-changed', _handle_main_participant_changed);
    meeting.on('speaker-changed', _handle_speaker_changed);
    meeting.on('entry-requested', _handle_entry_requested);
    meeting.on('entry-responded', _handle_entry_responded);
    meeting.on('chat-message', _handle_chat_message);
    meeting.on('recording-started', _handle_recording_started);
    meeting.on('recording-stopped', _handle_recording_stopped);
    meeting.on('meeting-joined', _handle_meeting_joined);
    meeting.on('meeting-left', _handle_meeting_left);
    meeting.on('livestream-started', _handle_live_stream_started);
    meeting.on('livestream-stopped', _handle_live_stream_stopped);
    meeting.on('video-state-changed', _handle_video_state_changed);
    meeting.on('video-seeked', _handle_video_seeked);
    meeting.on('webcam-requested', _handle_webcam_requested);
    meeting.on('mic-requested', _handle_mic_requested);
    meeting.on('pin-state-changed', _handle_pin_state_changed);
    meeting.on('connection-open', _handle_connection_open);
    meeting.on('connection-close', _handle_connection_close);
    meeting.on('switch-meeting', _handle_switch_meeting);
    meeting.on('error', _handle_error);
    meeting.localParticipant.on('stream-enabled', _handle_localParticipant_stream_enabled);
    meeting.localParticipant.on('stream-disabled', _handle_localParticipant_stream_disabled);
    meeting.join();
  };

  var leave = function leave() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.leave();
    }
  };

  var end = function end() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.end();
    }
  };

  var startRecording = function startRecording(webhookUrl, awsDirPath, config) {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.startRecording(webhookUrl, awsDirPath, config);
    }
  };

  var stopRecording = function stopRecording() {
    var meeting = meetingRef.current;

    if (meeting) {
      var _isRecording = isRecordingRef.current;

      if (_isRecording) {
        meeting.stopRecording();
      }
    }
  };

  var unmuteMic = function unmuteMic() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.unmuteMic();
    }
  };

  var muteMic = function muteMic() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.muteMic();
    }
  };

  var toggleMic = function toggleMic() {
    var localMicOn = localMicOnRef.current;

    if (localMicOn) {
      muteMic();
    } else {
      unmuteMic();
    }
  };

  var disableWebcam = function disableWebcam() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.disableWebcam();
    }
  };

  var enableWebcam = function enableWebcam() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.enableWebcam();
    }
  };

  var toggleWebcam = function toggleWebcam() {
    var localWebcamOn = localWebcamOnRef.current;

    if (localWebcamOn) {
      disableWebcam();
    } else {
      enableWebcam();
    }
  };

  var disableScreenShare = function disableScreenShare() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.disableScreenShare();
    }
  };

  var enableScreenShare = function enableScreenShare() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.enableScreenShare();
    }
  };

  var toggleScreenShare = function toggleScreenShare() {
    var localScreenShareOn = localScreenShareOnRef.current;

    if (localScreenShareOn) {
      disableScreenShare();
    } else {
      enableScreenShare();
    }
  };

  var sendChatMessage = function sendChatMessage(text) {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.sendChatMessage(text);
    }
  };

  var respondEntry = function respondEntry(participantId, decision) {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.respondEntry(participantId, decision);
    }
  };

  var getMics = function getMics() {
    try {
      var _meeting = meetingRef.current;
      return Promise.resolve(function () {
        if (_meeting) {
          return Promise.resolve(_meeting.getMics());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var getWebcams = function getWebcams() {
    try {
      var _meeting2 = meetingRef.current;
      return Promise.resolve(function () {
        if (_meeting2) {
          return Promise.resolve(_meeting2.getWebcams());
        }
      }());
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var changeWebcam = function changeWebcam(deviceId) {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.changeWebcam(deviceId);
    }
  };

  var changeMic = function changeMic(deviceId) {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.changeMic(deviceId);
    }
  };

  var startVideo = function startVideo(_ref3) {
    var link = _ref3.link;
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.startVideo({
        link: link
      });
    }
  };

  var stopVideo = function stopVideo() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.stopVideo();
    }
  };

  var resumeVideo = function resumeVideo() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.resumeVideo();
    }
  };

  var pauseVideo = function pauseVideo(_ref4) {
    var currentTime = _ref4.currentTime;
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.pauseVideo({
        currentTime: currentTime
      });
    }
  };

  var seekVideo = function seekVideo(_ref5) {
    var currentTime = _ref5.currentTime;
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.seekVideo({
        currentTime: currentTime
      });
    }
  };

  var startLivestream = function startLivestream(streamInfo) {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.startLivestream(streamInfo);
    }
  };

  var stopLivestream = function stopLivestream() {
    var meeting = meetingRef.current;

    if (meeting) {
      meeting.stopLivestream();
    }
  };

  var connectTo = function connectTo(_ref6) {
    var meetingId = _ref6.meetingId,
        payload = _ref6.payload;

    try {
      var _meeting3 = meetingRef.current;

      var _temp2 = function () {
        if (_meeting3) {
          return Promise.resolve(_meeting3.connectTo({
            meetingId: meetingId,
            payload: payload
          })).then(function () {});
        }
      }();

      return Promise.resolve(_temp2 && _temp2.then ? _temp2.then(function () {}) : void 0);
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var initSDK = function initSDK() {
    jsSdk.VideoSDK.config(tokenRef.current);

    if (joinWithoutUserInteraction) {
      join();
    }
  };

  React.useEffect(function () {
    initSDK();
  }, []);
  React.useEffect(function () {
    if (reinitialiseMeetingOnConfigChange && joinedOnFirstRender.current) {
      leave();
      initSDK();
      !joinWithoutUserInteraction && join();
    }
  }, [config.meetingId, token, reinitialiseMeetingOnConfigChange]);
  return /*#__PURE__*/React__default.createElement(MeetingProviderContex.Provider, {
    value: {
      meetingId: meeting === null || meeting === void 0 ? void 0 : meeting.id,
      meeting: meeting,
      localParticipant: localParticipant,
      mainParticipant: mainParticipant,
      activeSpeakerId: activeSpeakerId,
      participants: participants,
      presenterId: presenterId,
      localMicOn: localMicOn,
      localWebcamOn: localWebcamOn,
      localScreenShareOn: localScreenShareOn,
      messages: messages,
      isRecording: isRecording,
      isLiveStreaming: isLiveStreaming,
      pinnedParticipants: pinnedParticipants,
      connections: connections,
      join: join,
      leave: leave,
      end: end,
      startRecording: startRecording,
      stopRecording: stopRecording,
      sendChatMessage: sendChatMessage,
      respondEntry: respondEntry,
      muteMic: muteMic,
      unmuteMic: unmuteMic,
      toggleMic: toggleMic,
      disableWebcam: disableWebcam,
      enableWebcam: enableWebcam,
      toggleWebcam: toggleWebcam,
      disableScreenShare: disableScreenShare,
      enableScreenShare: enableScreenShare,
      toggleScreenShare: toggleScreenShare,
      getMics: getMics,
      getWebcams: getWebcams,
      changeWebcam: changeWebcam,
      changeMic: changeMic,
      startVideo: startVideo,
      stopVideo: stopVideo,
      resumeVideo: resumeVideo,
      pauseVideo: pauseVideo,
      seekVideo: seekVideo,
      startLivestream: startLivestream,
      stopLivestream: stopLivestream,
      connectTo: connectTo,
      isMeetingJoined: isMeetingJoined
    }
  }, children);
};

var useParticipant = function useParticipant(participantId, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$onStreamEnabled = _ref.onStreamEnabled,
      onStreamEnabled = _ref$onStreamEnabled === void 0 ? function () {} : _ref$onStreamEnabled,
      _ref$onStreamDisabled = _ref.onStreamDisabled,
      onStreamDisabled = _ref$onStreamDisabled === void 0 ? function () {} : _ref$onStreamDisabled;

  var _useState = React.useState(null),
      webcamStream = _useState[0],
      setwebcamStream = _useState[1];

  var _useState2 = React.useState(null),
      micStream = _useState2[0],
      setMicStream = _useState2[1];

  var _useState3 = React.useState(null),
      screenShareStream = _useState3[0],
      setScreenShareStream = _useState3[1];

  var meeting = useMeeting();

  var _useMemo = React.useMemo(function () {
    var _meeting$pinnedPartic;

    var participants = meeting === null || meeting === void 0 ? void 0 : meeting.participants;
    var localParticipant = meeting === null || meeting === void 0 ? void 0 : meeting.localParticipant;
    var activeSpeakerId = meeting === null || meeting === void 0 ? void 0 : meeting.activeSpeakerId;
    var mainParticipant = meeting === null || meeting === void 0 ? void 0 : meeting.mainParticipant;
    var pinState = (meeting === null || meeting === void 0 ? void 0 : (_meeting$pinnedPartic = meeting.pinnedParticipants) === null || _meeting$pinnedPartic === void 0 ? void 0 : _meeting$pinnedPartic.get(participantId)) || {
      cam: false,
      share: false
    };
    return {
      participants: participants,
      localParticipant: localParticipant,
      activeSpeakerId: activeSpeakerId,
      mainParticipant: mainParticipant,
      pinState: pinState
    };
  }, [meeting]),
      participants = _useMemo.participants,
      localParticipant = _useMemo.localParticipant,
      activeSpeakerId = _useMemo.activeSpeakerId,
      mainParticipant = _useMemo.mainParticipant,
      pinState = _useMemo.pinState;

  var participant = participants === null || participants === void 0 ? void 0 : participants.get(participantId);

  var setTrack = function setTrack(stream) {
    if (stream.track.readyState === 'live') {
      switch (stream.kind) {
        case 'video':
          setwebcamStream(stream);
          break;

        case 'audio':
          setMicStream(stream);
          break;

        case 'share':
          setScreenShareStream(stream);
          break;
      }
    }
  };

  var unSetTrack = function unSetTrack(stream) {
    if (stream.track.readyState !== 'live') {
      switch (stream.kind) {
        case 'video':
          setwebcamStream(null);
          break;

        case 'audio':
          setMicStream(null);
          break;

        case 'share':
          setScreenShareStream(null);
          break;
      }
    }
  };

  var _handleStreamEnabled = function _handleStreamEnabled(stream) {
    setTrack(stream);
    onStreamEnabled(stream);
  };

  var _handleStreamDisabled = function _handleStreamDisabled(stream) {
    unSetTrack(stream);
    onStreamDisabled(stream);
  };

  var setQuality = function setQuality(quality) {
    participant === null || participant === void 0 ? void 0 : participant.setQuality(quality);
  };

  var enableMic = function enableMic() {
    participant === null || participant === void 0 ? void 0 : participant.enableMic();
  };

  var disableMic = function disableMic() {
    participant === null || participant === void 0 ? void 0 : participant.disableMic();
  };

  var enableWebcam = function enableWebcam() {
    participant === null || participant === void 0 ? void 0 : participant.enableWebcam();
  };

  var disableWebcam = function disableWebcam() {
    participant === null || participant === void 0 ? void 0 : participant.disableWebcam();
  };

  var pin = function pin(data) {
    participant === null || participant === void 0 ? void 0 : participant.pin(data);
  };

  var unpin = function unpin(data) {
    participant === null || participant === void 0 ? void 0 : participant.unpin(data);
  };

  var switchTo = function switchTo(data) {
    return Promise.resolve(participant === null || participant === void 0 ? void 0 : participant.switchTo(data)).then(function () {});
  };

  React.useEffect(function () {
    var streams = participant === null || participant === void 0 ? void 0 : participant.streams;

    if (streams) {
      streams.forEach(function (stream) {
        setTrack(stream);
      });
    }

    participant === null || participant === void 0 ? void 0 : participant.on('stream-enabled', _handleStreamEnabled);
    participant === null || participant === void 0 ? void 0 : participant.on('stream-disabled', _handleStreamDisabled);
    return function () {
      participant === null || participant === void 0 ? void 0 : participant.off('stream-enabled', _handleStreamEnabled);
      participant === null || participant === void 0 ? void 0 : participant.off('stream-disabled', _handleStreamDisabled);
    };
  }, [participant]);
  return {
    displayName: participant === null || participant === void 0 ? void 0 : participant.displayName,
    participant: participant,
    webcamStream: webcamStream,
    micStream: micStream,
    screenShareStream: screenShareStream,
    webcamOn: !!webcamStream,
    micOn: !!micStream,
    screenShareOn: !!screenShareStream,
    isLocal: (localParticipant === null || localParticipant === void 0 ? void 0 : localParticipant.id) === participantId,
    isActiveSpeaker: activeSpeakerId === participantId,
    isMainParticipant: (mainParticipant === null || mainParticipant === void 0 ? void 0 : mainParticipant.id) === participantId,
    pinState: pinState,
    setQuality: setQuality,
    enableMic: enableMic,
    disableMic: disableMic,
    enableWebcam: enableWebcam,
    disableWebcam: disableWebcam,
    pin: pin,
    unpin: unpin,
    switchTo: switchTo
  };
};

var useConnection = function useConnection(connectionId, _temp) {
  var _ref = _temp === void 0 ? {
    onMeeting: {
      onParticipantJoined: function onParticipantJoined() {},
      onParticipantLeft: function onParticipantLeft() {},
      onChatMessage: function onChatMessage() {}
    }
  } : _temp,
      onMeeting = _ref.onMeeting;

  var onParticipantJoined = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantJoined;
  var onParticipantLeft = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onParticipantLeft;
  var onChatMessage = onMeeting === null || onMeeting === void 0 ? void 0 : onMeeting.onChatMessage;
  var meeting = useMeeting();

  var _useMemo = React.useMemo(function () {
    var connection = meeting === null || meeting === void 0 ? void 0 : meeting.connections.get(connectionId);

    if (!connection) {
      throw new Error('connectionId not found');
    }

    var connectionParticipants = new Map(connection.meeting.participants);
    return {
      connection: connection,
      connectionParticipants: connectionParticipants
    };
  }, [meeting]),
      connection = _useMemo.connection,
      connectionParticipants = _useMemo.connectionParticipants;

  var _useState = React.useState(new Map(connectionParticipants)),
      _connectionParticipants = _useState[0],
      setConnectionParticipants = _useState[1];

  var _handleParticipantJoined = function _handleParticipantJoined(participant) {
    setConnectionParticipants(function (s) {
      s.set(participant.id, participant);
      var participantsToSet = new Map(s);
      return participantsToSet;
    });
    onParticipantJoined(participant);
  };

  var _handleParticipantLeft = function _handleParticipantLeft(participantId) {
    setConnectionParticipants(function (s) {
      s["delete"](participantId);
      var newParticipants = new Map(s);
      return newParticipants;
    });
    onParticipantLeft(participantId);
  };

  var _handleChatMessage = function _handleChatMessage(data) {
    onChatMessage(data);
  };

  React.useEffect(function () {
    connection === null || connection === void 0 ? void 0 : connection.meeting.on('participant-joined', _handleParticipantJoined);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on('participant-left', _handleParticipantLeft);
    connection === null || connection === void 0 ? void 0 : connection.meeting.on('chat-message', _handleChatMessage);
    return function () {
      connection === null || connection === void 0 ? void 0 : connection.meeting.off('participant-joined', _handleParticipantJoined);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off('participant-left', _handleParticipantLeft);
      connection === null || connection === void 0 ? void 0 : connection.meeting.off('chat-message', _handleChatMessage);
    };
  }, [connection]);
  return {
    connection: {
      id: connection.id,
      close: connection.close,
      payload: connection.payload,
      meeting: {
        id: connection.meeting.id,
        sendChatMessage: connection.meeting.sendChatMessage,
        end: connection.meeting.end,
        participants: _connectionParticipants
      }
    }
  };
};

var usePubSub = function usePubSub(topic, _temp) {
  var _ref = _temp === void 0 ? {
    onMessageReceived: function onMessageReceived() {}
  } : _temp,
      onMessageReceived = _ref.onMessageReceived;

  var _useMeeting = useMeeting(),
      meeting = _useMeeting.meeting,
      isMeetingJoined = _useMeeting.isMeetingJoined;

  var _useState = React.useState([]),
      messages = _useState[0],
      setMessages = _useState[1];

  var isSubscribed = React.useRef(false);

  var publish = function publish(message, options) {
    if (meeting) {
      meeting.pubSub.publish(topic, message, options);
    }
  };

  var _handlePubSub = function _handlePubSub(data) {
    setMessages(function (s) {
      return [].concat(s, [data]);
    });
    onMessageReceived(data);
  };

  var subscribeToPubsub = function subscribeToPubsub(meeting) {
    try {
      var _meeting$pubSub;

      return Promise.resolve(meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub = meeting.pubSub) === null || _meeting$pubSub === void 0 ? void 0 : _meeting$pubSub.subscribe(topic, _handlePubSub)).then(function (data) {
        if (data) {
          setMessages(data.messages);
        }
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  React.useEffect(function () {
    if (meeting && !isSubscribed.current && isMeetingJoined) {
      isSubscribed.current = true;
      subscribeToPubsub(meeting);
      return function () {
        var _meeting$pubSub2;

        meeting === null || meeting === void 0 ? void 0 : (_meeting$pubSub2 = meeting.pubSub) === null || _meeting$pubSub2 === void 0 ? void 0 : _meeting$pubSub2.unsubscribe(topic, _handlePubSub);
      };
    }
  }, [meeting, isMeetingJoined]);
  return {
    publish: publish,
    messages: messages
  };
};

var Constants = jsSdk.VideoSDK.Constants;

exports.Constants = Constants;
exports.MeetingConsumer = MeetingConsumer;
exports.MeetingProvider = MeetingProvider;
exports.useConnection = useConnection;
exports.useMeeting = useMeeting;
exports.useParticipant = useParticipant;
exports.usePubSub = usePubSub;
//# sourceMappingURL=index.js.map
